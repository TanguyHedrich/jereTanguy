# Avant de lancer ce script, il faut lancer les processus qui tourneront en parallele :
#
# $ ipcluster start --n=5 --profile=mpi --engines=MPIExecEngineSetLauncher
#

from IPython.parallel import Client
import numpy as np


def findlimits(rank,size,Nx):
    """Finds limits of 'Nx' for 'rank' engine"""
     
    newNx = round( (Nx + (size-1) * 2) / (size) )
    x = [0,0]
    if rank == 0:
        x = [0,newNx]
    elif rank == size - 1:
        x = [rank * newNx - rank,Nx]
        newNx = x[1] - x[0]
    else:
        x[0] = rank * newNx - rank
        x[1] = x[0] + newNx
    return x,newNx

def find(f, seq):
    """fonction qui cherche une valeur dans une liste"""
    comp = 0
    for item in seq:
        if item == f: 
            return comp
        comp += 1

#pour utiliser le %autopx
%load_ext parallelmagic 


#recherche les processus "engine"
rc = Client(profile='mpi')
#Cree une vue de tous les process
view = rc[:]

#nombre de clients
nCl = len(rc.ids)



view.activate()
view.block = True

# Entre les bornes %autopx, les commandes sont envoyÃ©es aux processus
%autopx

#dimension du plan
Nx=80
Ny=120

from mpi4py import MPI
import cell_mdl
import numpy

rank = MPI.COMM_WORLD.Get_rank()
size = MPI.COMM_WORLD.Get_size()


# Separation de l'axe x
[x,newNx] = findlimits(rank,size,Nx+4)

xyIstim1 = [3,42,4,6] 
xyIstim2 = [40,82,95,97]
# Coordonnees des stimuli
if (xyIstim1[0] > x[-1]) or (xyIstim1[1] < x[0]):
    xyIstim1[0:2] = [-1,-1]
else:
    xyIstim1[0:2] = [max(xyIstim1[0],x[0])-x[0],min(xyIstim1[1],x[-1])-x[0]]

if (xyIstim2[0] > x[-1]) or (xyIstim2[1] < x[0]):
    xyIstim2[0:2] = [-1,-1]
else:
    xyIstim2[0:2] = [max(xyIstim2[0],x[0])-x[0],min(xyIstim2[1],x[-1])-x[0]]

mpi=[(rank==0),rank==(size-1)]
m2=cell_mdl.Red3(newNx-2*(rank==0)-2*(rank==(size-1)),Ny,mpi=mpi)

#Definition parametres d'integration
tmax=5000
decim=20
NbIter=0
dt=0.05
Ft = 0.15
dtMin = dt
dtMax = 6
dVmax = 1

#Initialisation des variables de stockage
time=numpy.zeros(round(tmax/(dt*decim))+1)
Vm=numpy.zeros((m2.Nx,m2.Ny,round(tmax/(dt*decim))+1))

#Integration 
while (m2.time<tmax):
    Ist=0.2/2*(numpy.sign(numpy.sin(2*numpy.pi*m2.time/(1*tmax)))+1)*numpy.sin(2*numpy.pi*m2.time/(1*tmax))


    if xyIstim1[0] != -1:
        m2.Istim[xyIstim1[0]:xyIstim1[1],xyIstim1[2]:xyIstim1[3]]=Ist
    if xyIstim2[0] != -1:
        m2.Istim[xyIstim2[0]:xyIstim2[1],xyIstim2[2]:xyIstim2[3]]=Ist


    m2.derivT(dt)
    #Pas temporel adaptatif
#    dt = dtMin*dVmax/numpy.max(abs(m2.dY[...,0].all())-Ft);
#    if dt > dtMax:
#        dt = dtMax
#    if dt < dtMin:
#        dt = dtMin
    #Avance du temps
    m2.time =m2.time+dt
    #Stockage du temps et de l'etat
    if not round(m2.time/dt)%decim:
        NbIter+=1
        time[NbIter]=m2.time
        Vm[:,:,NbIter]=m2.Y[:,:,0].copy()
    
    #Communication
    to_send_1 = m2.Y[1,:,0]
    to_send_2 = m2.Y[-2,:,0]
    to_recv_1 = m2.Y[-1,:,0]
    to_recv_2 = m2.Y[1,:,0]

    if rank % 2:
        if rank != 0:
            MPI.COMM_WORLD.send(to_send_1 , dest=rank-1)
        if rank != size - 1:
            to_recv_1 = MPI.COMM_WORLD.recv(source=rank+1)
            MPI.COMM_WORLD.send(to_send_2, dest=rank+1)
        if rank != 0:
            to_recv_2 = MPI.COMM_WORLD.recv(source=rank-1)
    else:
        if rank != size - 1:
            to_recv_1 = MPI.COMM_WORLD.recv(source=rank+1)
        if rank != 0:
            MPI.COMM_WORLD.send(to_send_1 , dest=rank-1)
            to_recv_2 = MPI.COMM_WORLD.recv(source=rank-1)
        if rank != size - 1:
            MPI.COMM_WORLD.send(to_send_2, dest=rank+1)    

    m2.Y[-1,:,0] = to_recv_1 
    m2.Y[1,:,0] =  to_recv_2

%autopx

#Recuperation des variables
Nx = rc[0]['Nx']
Ny = rc[0]['Ny']
tmax = rc[0]['tmax']
dt = rc[0]['dt']
decim = rc[0]['decim']
tabrank = view['rank']
NbIter = rc[0]['NbIter']
time = rc[0]['time']
tabx = view['x']

# Concatenation des resultats
sol_total = np.empty((max(max(tabx)),Ny+4,NbIter+1))
for i in rc.ids:
    i_client = find(i, tabrank)
    sol_total[tabx[i_client][0]:tabx[i_client][1],:,:]=np.array(rc[i_client]['Vm'])

#sauvegarde
logY=open('Yv%d-%d_1P.npz'% (Nx,Ny),'w')
np.savez(logY,t=time[:time.nonzero()[-1][-1]+1],Y=sol_total[:time.nonzero()[-1][-1]+1])
logY.close()


