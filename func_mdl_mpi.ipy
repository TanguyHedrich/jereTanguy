
def simu_euler_parallel(tmax):
    """ Computes euler integration of model object 'mdl' until time 'tmax'. Uses parallel computing.

    Syntax:
    time,Vm = simu_euler_parallel(tmax)

    Inputs:
    tmax -- duration of the simulation (ms)
    
    Outputs:
    time -- list of the time points
    Vm -- Membrane potential (solution of the integration)

    Note:
    Engine processes should have been lauched before running this function, e.g.:
        $ ipcluster start --n=6 --profile=mpi --engines=MPIExecEngineSetLauncher
   """
    from mpi4py import MPI
    import cell_mdl
    from IPython.parallel import Client
    import cPickle
    import numpy as np

    def find(f, seq):
        """Find an element in a list

        Syntax:
        indice = find(el, list)

        Inputs:
        el -- element to find
        list -- list of elements to investigate

        Outputs
        indice -- first indice of the element in the list
                    returns -1 if the el cannot be found
        """
        comp = 0
        for item in seq:
	        if item == f: 
		        return comp
	        comp += 1
        return -1

    #find the engine processes
    rc = Client(profile='mpi')
    rc.clear()
    #Create a view of the processes
    view = rc[:]

    #number of clients
    nCl = len(rc.ids)
    #divisors of nCl
    div = [i for i in range(1,nCl+1) if nCl%i==0]
    ldiv = len(div)

    #the surface will be divided into nbx rows and nby columns
    if ldiv %2 == 0:
        nbx = div[ldiv/2]
        nby = div[ldiv/2-1]
    else:
        nbx = nby = div[ldiv/2]
        

    @view.remote(block=False)
    def parallelcomp(tmax,nbx,nby):
        """Main function lauched by the engine processes. Compute the euler integration
        of a block of the global surface

        Syntax:
        Results = parallelcomp(tmax,nbx,nby)
        
        Inputs:
        tmax -- duration of the simulation
        nbx -- number of rows
        nby -- number of columns

        Outputs:
        Results -- list of the results for each process
                An element of this list is a dictionnary containing:
                    'Nx': Number of rows computed by this process
                    'Ny': Number of columns
                    'rank': rank of the process
                    'time': list of the time points
                    'x': indices of the first and last rows computed by this process,
                            according the global surface
                    'y': indices of the first and last columns
                    'Vm': solution
        """
        from mpi4py import MPI
        import cell_mdl
        import numpy

        def findlimitsx(rank,nbx,Nx):
	        newNx = round( (Nx + (nbx-1) * 2) / (nbx) )
	        x = [0,0]
	        if (rank%nbx==0):
		        x = [0,newNx]
	        elif rank%nbx==(nbx-1):
		        x = [rank%nbx * newNx - rank%nbx,Nx]
		        newNx = x[1] - x[0]
	        else:
		        x[0] = rank%nbx * newNx - rank%nbx
		        x[1] = x[0] + newNx

	        return x,newNx

        def findlimitsy(rank,nby,Ny,nbx):
	        newNy = round( (Ny + (nby-1) * 2) / (nby) )
	        y = [0,0]
	        if (rank/nbx==0):
		        y = [0,newNy]
	        elif (rank/nbx==(nby-1)):
		        y = [rank/nbx * newNy - rank/nbx,Ny]
		        newNy = y[1] - y[0]
	        else:
		        y[0] = rank/nbx * newNy - rank/nbx
		        y[1] = y[0] + newNy

	        return y,newNy

        #dimensions of the surgace
        Nx=80
        Ny=120

        rank = MPI.COMM_WORLD.Get_rank()
        # Which rows should I compute?
        [x,newNx] = findlimitsx(rank,nbx,Nx+4)

        # What about the columns?
        [y,newNy] = findlimitsy(rank,nby,Ny+4,nbx)


        #Stimulation (global coordinates)
        xyIstim1 = [3,42,4,6] 
        xyIstim2 = [40,82,95,97]
        
        #computing the local coordinates
        if (xyIstim1[0] > x[-1]) or (xyIstim1[1] < x[0]):
            xyIstim1[0:2] = [-1,-1]
        else:
            xyIstim1[0:2] = [max(xyIstim1[0],x[0])-x[0],min(xyIstim1[1],x[-1])-x[0]]

        if (xyIstim2[0] > x[-1]) or (xyIstim2[1] < x[0]):
            xyIstim2[0:2] = [-1,-1]
        else:
            xyIstim2[0:2] = [max(xyIstim2[0],x[0])-x[0],min(xyIstim2[1],x[-1])-x[0]]


        if (xyIstim1[2] > y[-1]) or (xyIstim1[3] < y[0]):
            xyIstim1[2:4] = [-1,-1]
        else:
            xyIstim1[2:4] = [max(xyIstim1[2],y[0])-y[0],min(xyIstim1[3],y[-1])-y[0]]

        if (xyIstim2[2] > y[-1]) or (xyIstim2[3] < y[0]):
            xyIstim2[2:4] = [-1,-1]
        else:
            xyIstim2[2:4] = [max(xyIstim2[2],y[0])-y[0],min(xyIstim2[3],y[-1])-y[0]]


        #Creation of the model (one for each process)
        mpi=[(rank%nbx==0),rank%nbx==(nbx-1),(rank/nbx==0),(rank/nbx==(nby-1))]
        mdl=cell_mdl.Red3(newNx-2*(rank%nbx==0)-2*(rank%nbx==(nbx-1)),newNy-2*(rank/nbx==0)-2*(rank/nbx==(nby-1)),mpi=mpi)

        #Tells the model where the stimuli are
        if xyIstim1[0] != -1:
            mdl.stimCoord = xyIstim1
        if xyIstim2[0] != -1:
            mdl.stimCoord2 = xyIstim2


        decim=20
        NbIter=0
        dt=0.05
        Ft = 0.15
#        dtMin = dt
#        dtMax = 6
#        dVmax = 1

        time=numpy.zeros(round(tmax/(dt*decim))+1)
        Vm=numpy.zeros((mdl.Nx,mdl.Ny,round(tmax/(dt*decim))+1))
    

        while (mdl.time<tmax):
            Ist=0.2/2*(numpy.sign(numpy.sin(2*numpy.pi*mdl.time/(1*tmax)))+1)*numpy.sin(2*numpy.pi*mdl.time/(1*tmax))

            if xyIstim1[0] != -1:
                mdl.Istim[xyIstim1[0]:xyIstim1[1],xyIstim1[2]:xyIstim1[3]]=Ist
            if xyIstim2[0] != -1:
                mdl.Istim[xyIstim2[0]:xyIstim2[1],xyIstim2[2]:xyIstim2[3]]=Ist

            mdl.derivT(dt)

            #Communication x
            to_send_1 = mdl.Y[1,:,0]
            to_send_2 = mdl.Y[-2,:,0]
            to_recv_1 = mdl.Y[-1,:,0]
            to_recv_2 = mdl.Y[0,:,0]

            if rank % 2:
                if rank%nbx != 0:
	                MPI.COMM_WORLD.send(to_send_1 , dest=rank-1)
                if rank%nbx != nbx - 1:
	                to_recv_1 = MPI.COMM_WORLD.recv(source=rank+1)
	                MPI.COMM_WORLD.send(to_send_2, dest=rank+1)
                if rank%nbx != 0:
	                to_recv_2 = MPI.COMM_WORLD.recv(source=rank-1)
            else:
                if rank%nbx != nbx - 1:
	                to_recv_1 = MPI.COMM_WORLD.recv(source=rank+1)
                if rank%nbx != 0:
	                MPI.COMM_WORLD.send(to_send_1 , dest=rank-1)
	                to_recv_2 = MPI.COMM_WORLD.recv(source=rank-1)
                if rank%nbx != nbx - 1:
	                MPI.COMM_WORLD.send(to_send_2, dest=rank+1)	

            mdl.Y[-1,:,0] = to_recv_1 
            mdl.Y[0,:,0] =  to_recv_2

            #Communication y
            to_send_1 = mdl.Y[:,1,0]
            to_send_2 = mdl.Y[:,-2,0]
            to_recv_1 = mdl.Y[:,-1,0]
            to_recv_2 = mdl.Y[:,0,0]

            if rank % 2:
                if rank/nbx != 0:
                    to_recv_2 = MPI.COMM_WORLD.recv(source=rank-nbx)
                if rank/nbx != nby - 1:
                    MPI.COMM_WORLD.send(to_send_2, dest=rank+nbx)
                    to_recv_1 = MPI.COMM_WORLD.recv(source=rank+nbx)
                if rank/nbx != 0:
                    MPI.COMM_WORLD.send(to_send_1 , dest=rank-nbx)
            else:
                if rank/nbx != nby - 1:
                    MPI.COMM_WORLD.send(to_send_2, dest=rank+nbx)
                if rank/nbx != 0:
                    to_recv_2 = MPI.COMM_WORLD.recv(source=rank-nbx)
                    MPI.COMM_WORLD.send(to_send_1 , dest=rank-nbx)	    
                if rank/nbx != nby - 1:
                    to_recv_1 = MPI.COMM_WORLD.recv(source=rank+nbx)

            mdl.Y[:,-1,0] = to_recv_1
            mdl.Y[:,0,0] =  to_recv_2

            mdl.time =mdl.time+dt
            if not round(mdl.time/dt)%decim:
                NbIter+=1
                time[NbIter]=mdl.time
                Vm[:,:,NbIter]=mdl.Y[:,:,0].copy()

        return {'Nx':Nx,'Ny':Ny,'rank':rank,'time':time,'x':x,'y':y,'Vm':Vm}

    print 'Parallel computation...'
    res = parallelcomp(tmax,nbx,nby)
    view.wait(res)  #wait for the results
    tabResults = res.get()
    print 'done'

    Nx = tabResults[0]['Nx']
    Ny = tabResults[0]['Ny']
    time = tabResults[0]['time']
    tabrank = np.empty(len(tabResults))
    for i in range(len(tabResults)):
        tabrank[i] = tabResults[i]['rank']


    # Aggregation of the results
    sol_total = np.empty((Nx+4,Ny+4,len(time)))
    for i in rc.ids:
        i_client = find(i, tabrank)
        x = tabResults[i_client]['x']
        y = tabResults[i_client]['y']
        sol_total[x[0]:x[1],y[0]:y[1],:]=np.array(tabResults[i_client]['Vm'])

    return time[:time.nonzero()[-1][-1]+1],sol_total[:time.nonzero()[-1][-1]+1]
    
def timing(tmax):
    for i in range(5):
        [t,v]=simu_euler_parallel(tmax)
        
%prun -Dmpixy.stats timing(5)
